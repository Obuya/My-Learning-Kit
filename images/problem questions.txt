Ex 1) draw a flowchart for a computer program to receive two numbers and output their sum.
Ex 2) draw a flowchart for a computer program to receive three numbers and store them in memory spaces called a, b, and c as three sides of a triangle and, by using Heron’s formula, calculate and output the area of the triangle.
Ex 3) draw a flowchart for a computer program to receive three numerical coefficients of a quadratic equation (store them in memory spaces called a, b, and c) and calculate and output its roots. Write a precondition that assumes coefficients are good enough such that a solution in real number exists.
Ex 4) draw a flowchart to receive three numerical coefficients of a quadratic equation and determines if it has two distinct real roots, one root, or no roots in real numbers.
Ex 5) draw a flowchart to receive a number and map it to a letter grade based on York standard.
Ex 6) assume there is a webpage containing an HTML input of type text and a button. When the button is clicked a function, named Problem06, is called. Draw a flowchart that outputs whether the input is positive or negative until a zero is received. When a zero is received, the button is disabled (so the function cannot be called anymore).
Ex 7) by modifying your flowchart above, draw a flowchart to continue receiving numbers and output if they are positive or negative until a zero is entered. When a zero is entered, the program should output how many positive and how many negative numbers have been entered, then it stops.
Ex 8) considering the same approach above, draw a flowchart to continue receiving numbers and output if they are divisible by 6 or not until a zero is entered. When a zero is entered, the program should output how many of the entered numbers were divisible by 6, then it stops. IMPORTANT RESTRICTION: you are not allowed to divide the number by 6; therefore, you are not allowed to use the modulus operator (%) over 6 to verify the remainder whether the number is divided by 6.
Ex 9) Devise a flowchart to receive a positive number and output each digit separately. For instance, if the input is 692, the program should output 2, 9, 6. Another example, if the number is 135429 the program should out put 9, 2, 4, 5, 3, and 1.
Ex 10) Devise a flowchart to receive a positive number and output how many of its digits are equal to 7. For instance, if the input is 772, the program should output 2, because there are two sevens there. Another example, if the input is 14368, the program should output 0.
Ex 11) Devise a flowchart to receive a positive number and output sum of its digits. For instance, if the input is 63932, the program should output 23, because 6+3+9+3+2 is 23. Another example, if the input is 23 the program should output 5.
Ex 12) Devise a flowchart to receive a positive number and output "yes" if it's equal to its reverse; otherwise, output "no". For instance, if the input is 63936, the program should output "yes", because if you read the digits from left to right or from right to left, it's the same number. But, if the input is 632, the program should output "no" because 632 is not the same as 236.
Ex 13) Devise an algorithm to receive a positive number, as n, and output n! (n Factorial).
Ex 14) Devise an algorithm to input an integer greater than 1, as n, and output the first n values of the Fibonacci sequence. In Fibonacci sequence, the first two values are 0 and 1 and other values are sum of the two values preceding it. For instance, if the input is 4, the program should print 0, 1, 1, 2,. As another example, if the input is 9, the program should output 0, 1, 1, 2, 3, 5, 8, 13, 21,.
Ex 15) Devise an algorithm to input a positive integer, n, – and by using XX characters – output the figure below that has n rows and each row k has k pairs of XX. For instance, if input is 5, the figure on the left (and if the input is 12, the figure on the right) should be generated by the program.

Ex 16) Devise an algorithm to input 200 numbers and determine how many are positive and how many negative.
Ex 17) Devise an algorithm to receive a number and determine if it’s a prime number or not.
Ex 18) Devise an algorithm to output 12 characters “*”. 
Ex 19) Devise an algorithm to output all prime numbers between 2 and 1000, inclusively.
Ex 20) devise a program to output sum of values stored in an array of 100 elements.




EX 21) Draw a flowchart that inputs four distinct characters, outputs the four characters, reorders and outputs the four characters so that the second char becomes the first, the third char becomes the second and so on... the first char becomes the last. reorder the reordered chars and output it aswell.

Ex 22) Develop an algorithm to test the first 500 integers and output only those that are perfect. a perfect number is one that is equal to the sum of all its factors. (the smallest perfect number  6 = 1 + 2 + 3)

Ex 23) Generate both the Fibonacci sequence and its sum sequence. let f_j be jth term of the fibonacci sequence. thus, f_3 is 2 f_4 is 3 f_5 is 5 and so forth. 
	
	S_5 = 1 + 1 + 2 + 3 + 5  = 12 

Ex 24) Constuct a flowchart to calculate and output a table of four columns. the first column is to contain the intergers form 1 to 100. the second column is to contain the squares of the corresponding intergers in the first coloumn. the third are to contain the cubes and fourth powers of the intergers of the first coloumn. 

Ex 25) draw a flowchart, given a list of positive intergers, search every list from 1  to n and locate and print the value of the frist element that is at least twice the value of its immediate predecessor. if no such element is found, print "none". 

Ex 26) draw a flowchart, givn a list of intergers ,scan the list, element by element,from 1 to n, summing the intergers encountered untill the sum thus developed exceeds a given value R.(if the sum never exceeds R in the process then the entire list should be summed.)  Print out the index of the last element included in the sum.

Ex 27) draw a flowchart, assume the variable n and the list(a_p, i = 1(1)n) have already been assigned values. print out the message "YES" if all the elements (a_i, i = 1(1)n) are eqaul, and prints "NO" otherwise. use an iteraation box in your flowchart.

Ex 28) flowchart an algorithm to printout an hourglass figure surrunded by a line border, and the dimension, 7. make the frame fit snugly about the hourglass and read in only two items of information, that is, values for the print character, C, and the dimension, i.

Ex 29) search the list in the forward direction, that is, P1, P2, P3, and so forth, for the first value grater than 50 in absolute value, assigning this value to W and 1 to ANY. If no such value is found, assign 0 to ANY. in either case, now proceed to the same point in the flowchart.

Ex 30) the algorithm uses two lists, IN and OUT. each list contains each of the 26 letters of the alphabet, but the ordering of the letters is different in the two lists. the algorithm operates as follows: 